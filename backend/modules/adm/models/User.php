<?php

namespace backend\modules\adm\models;

use backend\modules\crm\models\Company;
use backend\modules\hr\models\Employee;
use Yii;
use yii\base\InvalidConfigException;
use yii\base\NotSupportedException;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Connection;
use yii\db\Exception;
use yii\helpers\ArrayHelper;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $username
 * @property string|null $first_name
 * @property string|null $last_name
 * @property string $auth_key
 * @property string $password_hash
 * @property string|null $password_reset_token
 * @property string|null $verification_token
 * @property string $email
 * @property string|null $photo
 * @property string|null $last_auth
 * @property int $status 0 - deleted; 9 - inactive; 10 - active;
 * @property int $created_at
 * @property int $updated_at
 * @property int $psw_changed used to verify if the user changed the default psw generated by APP  0: not changed; 1: changed
 * @property int $first_time_login 0: no; 1: yes
 * @property string $password write-only password
 *
 * @property Company[] $companies
 * @property UserErpCompany[] $userErpCompanies
 */
class User extends ActiveRecord implements IdentityInterface
{
    const STATUS_DELETED = 0;
    const STATUS_INACTIVE = 9;
    const STATUS_ACTIVE = 10;
    const PSW_CHANGED_NO = 0;
    const PSW_CHANGED_YES = 1;
    const FIRST_TIME_LOGIN_NO = 0;
    const FIRST_TIME_LOGIN_YES = 1;

    public static $users = [];
    public $userErpCompaniesNames;

    /**
     * Populates the above $user with id as key and name as value if we came with $getFullName = true
     * @return void
     */
    public static function setUsers($getFullName = false, $onlyActive = true)
    {
        self::$users = [];
        $models = self::find();

        if ($onlyActive) {
            $models->where(['status' => self::STATUS_ACTIVE]);
        }
        $models = $models->all();

        foreach ($models as $model) {
            if ($getFullName) {
                self::$users[$model->id] = $model->fullName();
            } else {
                self::$users[$model->id] = $model;
            }
        }
    }

    /**
     * @return Connection the database connection used by this AR class.
     * @throws InvalidConfigException
     */
    public static function getDb()
    {
        return Yii::$app->get('db');
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return MYSQL_DB_MODULE_INITIAL . '.user';
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            ['status', 'default', 'value' => self::STATUS_INACTIVE],
            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_INACTIVE, self::STATUS_DELETED]],
            [['first_name', 'last_name'], 'string', 'max' => 64],
            ['first_name', 'required'],
            ['last_name', 'required'],
            ['email', 'required'],
            ['email', 'unique', 'targetClass' => '\backend\modules\adm\models\User', 'message' => 'This email address has already been taken.'],
            ['email', 'email'],
            ['email', 'trim'],
            ['email', 'string', 'max' => 255],

            ['username', 'trim'],
            ['username', 'unique', 'targetClass' => '\backend\modules\adm\models\User', 'message' => 'This username has already been taken.'],
            ['username', 'string', 'min' => 2, 'max' => 255],

            ['psw_changed', 'default', 'value' => self::PSW_CHANGED_NO],
            ['psw_changed', 'in', 'range' => [self::PSW_CHANGED_NO, self::PSW_CHANGED_YES]],
            ['first_time_login', 'default', 'value' => self::FIRST_TIME_LOGIN_YES],
            ['first_time_login', 'in', 'range' => [self::FIRST_TIME_LOGIN_NO, self::FIRST_TIME_LOGIN_YES]],

            [
                'companies', 'required',
                'except' => ['skipCompanyValidation'],
                'message' => Yii::t('adm', 'The user should have at least one company associated')
            ],
            [
                ['companies'],
                'each',
                'rule' => ['integer'],
                'except' => ['skipCompanyValidation'],
                'allowMessageFromRule' => false,
                'message' => Yii::t('adm', 'The details received about one or more companies are not correct')
            ],
            [
                ['companies'],
                'exist',
                'except' => ['skipCompanyValidation'],
                'allowArray' => true,
                'targetClass' => ErpCompany::className(),
                'targetAttribute' => 'company_id',
                'message' => Yii::t('adm', 'One or more of the selected companies does not belong to your organization')
            ]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('adm', 'ID'),
            'username' => Yii::t('adm', 'Username'),
            'first_name' => Yii::t('adm', 'First Name'),
            'last_name' => Yii::t('adm', 'Last Name'),
            'auth_key' => Yii::t('adm', 'Auth Key'),
            'password_hash' => Yii::t('adm', 'Password Hash'),
            'password_reset_token' => Yii::t('adm', 'Password Reset Token'),
            'email' => Yii::t('adm', 'Email'),
            'photo' => Yii::t('adm', 'Photo'),
            'last_auth' => Yii::t('adm', 'Last Auth'),
            'status' => Yii::t('adm', 'Status'),
            'psw_changed' => Yii::t('adm', 'Password Changed'),
            'first_time_login' => Yii::t('adm', 'First Time Login'),
            'created_at' => Yii::t('adm', 'Created At'),
            'updated_at' => Yii::t('adm', 'Updated At'),
            'verification_token' => Yii::t('adm', 'Verification Token'),
        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Finds user by username
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * Finds user by email
     * @param string $email
     * @return static|null
     */
    public static function findByEmail($email)
    {
        return static::findOne(['email' => $email, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * Finds user by email
     * @param string $email
     * @return static|null
     */
    public static function findByDeletedByEmail($email)
    {
        return static::findOne(['email' => $email, 'status' => self::STATUS_INACTIVE]);
    }

    /**
     * Finds user by password reset token
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
            'status' => self::STATUS_ACTIVE,
        ]);
    }

    /**
     * Finds user by verification email token
     * @param string $token verify email token
     * @return static|null
     */
    public static function findByVerificationToken($token)
    {
        return static::findOne([
            'verification_token' => $token,
            'status' => self::STATUS_INACTIVE
        ]);
    }

    /**
     * Finds out if password reset token is valid
     * @param string $token password reset token
     * @return bool
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int)substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * {@inheritdoc}
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    /**
     * Generates password hash from password and sets it to the model
     * @param string $password
     * @throws \yii\base\Exception
     */
    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Generates new token for email verification
     */
    public function generateEmailVerificationToken()
    {
        $this->verification_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }

    public function fullName()
    {
        $fullName = '';
        if (!empty($this->first_name)) {
            $fullName .= $this->first_name;
        }
        if (!empty($fullName)) {
            $fullName .= ' ';
        }
        if (!empty($this->last_name)) {
            $fullName .= $this->last_name;
        }
        return $fullName;
    }

    /**
     * @param null $emailAddress
     * @return mixed|string|null
     */
    public function setUsernameFromEmailAddress($emailAddress = null)
    {
        $email = $emailAddress === null ? $this->email : $emailAddress;
        $emailParts = explode('@', $email);
        return !empty($emailParts[0]) ? $emailParts[0] : null;
    }

    /**
     * Return user status
     * @param int $status_id
     */
    public static function getStatus($status_id)
    {
        $names = [
            0 => Yii::t('adm', 'Deleted'),
            9 => Yii::t('adm', 'Inactive'),
            10 => Yii::t('adm', 'Active')
        ];
        return $names[$status_id];
    }

    /**
     * set user
     * return model
     * @param $data
     * @param bool $createIfNotExist
     */
    public static function setUser($data, bool $createIfNotExist = true, $userScenarios = [])
    {
        //check if there is the current email in user table and update fields accordingly
        $user = self::find()->where('email = :email', [':email' => $data['email']])->one();
        if ($user !== null) {
            $user->updateUser([
                'email' => $data['email'],
                'first_name' => $data['first_name'],
                'last_name' => $data['last_name'],
                'status' => !empty($data['status']) ? $data['status'] : null
            ]);
            return $user;
        }
        //check if there is the old email in user table and update fields accordingly
        if (!empty($data['oldEmail'])) {
            $user = User::find()->where('email = :email', [':email' => $data['oldEmail']])->one();
            if ($user !== null) {
                $user->updateUser([
                    'email' => $data['email'],
                    'first_name' => $data['first_name'],
                    'last_name' => $data['last_name'],
                    'status' => !empty($data['status']) ? $data['status'] : null
                ]);
                return $user;
            }
        }
        //create new user
        return self::createUser([
            'email' => $data['email'],
            'first_name' => $data['first_name'],
            'last_name' => $data['last_name']], $userScenarios
        );
    }

    /**
     * create new user
     * return model
     * @throws Exception|\yii\base\Exception
     */
    public static function createUser($data, $userScenarios = [])
    {
        $user = new User();
        foreach ($userScenarios as $scenario) {
            $user->setScenario($scenario);
        }
        if (!empty($data['email'])) {
            $user->username = $user->setUsernameFromEmailAddress($data['email']);
        }
        $user->auth_key = Yii::$app->security->generateRandomString();
        $user->password_hash = Yii::$app->security->generatePasswordHash(Yii::$app->params['defaultEmployeePsw']);
        $user->verification_token = Yii::$app->security->generateRandomString() . '_' . time();
        $user->status = User::STATUS_ACTIVE;
        $user->created_at = Yii::$app->formatter->asTimestamp(date('Y-d-m h:i:s'));

        foreach ($data as $key => $value) {
            if (!$user->hasAttribute($key)) {
                continue;
            }
            $user->$key = $value;
        }

        if (!$user->validate()) {
            if ($user->hasErrors()) {
                foreach ($user->errors as $error) {
                    throw new Exception($error[0], '', 400);
                }
            }
        }
        if ($user->save()) {
            try {
                $auth = Yii::$app->authManager;
                $roleObj = $auth->getRole('BasicUser');
                $auth->assign($roleObj, $user->id);
            } catch (\Exception $e) {
                throw new Exception($e->getMessage(), $e->getCode());
            }
        }
        if ($user->hasErrors()) {
            foreach ($user->errors as $error) {
                throw new Exception($error[0], '', 400);
            }
        }
        return $user;
    }

    /**
     * update an existing user
     * @throws Exception|\yii\base\Exception
     */
    public function updateUser($data)
    {
        //the initial status from user table
        $status = $this->status;
        foreach ($data as $key => $value) {
            if (!$this->hasAttribute($key)) {
                continue;
            }
            $this->$key = $value;
        }
        //in case status is null, keep the initial status
        if (empty($data['status'])) {
            $this->status = $status;
        }
        //if email is not null, set username
        if (!empty($data['email'])) {
            $this->username = $this->setUsernameFromEmailAddress($data['email']);
        }
        $this->setScenario('skipCompanyValidation');
        if (!$this->validate()) {
            if ($this->hasErrors()) {
                foreach ($this->errors as $error) {
                    throw new Exception($error[0], '', 400);
                }
            }
        }
        if (!$this->save()) {
            if ($this->hasErrors()) {
                foreach ($this->errors as $error) {
                    throw new Exception($error[0], '', 400);
                }
            }
        }
        return true;
    }

    /**
     * get user image url
     * @param $userId
     * @param $gender
     * @return string|void
     */
    public static $noImagePath = '/images/profile-img/other.svg';

    public static function getUserImage($userId)
    {
        $user = self::find()->where('id = :user_id', [':user_id' => $userId])->one();
        if ($user === null) {
            return self::$noImagePath;
        }

        if (empty($user->photo)) {
            return self::getUserImageByGender(self::getGenderByUserId($userId));
        }

        $imgPath = "/images/profile-img/{$user->photo}";
        $filePath = Yii::getAlias("@backend/web/$imgPath");
        if (!file_exists($filePath)) {
            return self::getUserImageByGender(self::getGenderByUserId($userId));
        }
        return $imgPath;
    }

    /**
     * get gender image url
     * @param $gender
     * @return string
     */
    public static function getUserImageByGender($gender)
    {
        switch ($gender) {
            case 0:
                return '/images/profile-img/other.svg';
            case 1:
                return '/images/profile-img/man.svg';
            case 2:
                return '/images/profile-img/woman.svg';
        }
        return self::$noImagePath;
    }

    /**
     * get gender by user id
     * @param $userId
     * @return int|mixed|null
     */
    public static function getGenderByUserId($userId)
    {
        if (Yii::$app->getModule('hr'))
            $employee = Employee::find()->where('user_id = :user_id', [':user_id' => $userId])->one();
        return !empty($employee) ? $employee->gender : 0;
    }

    public static function findOneByAttributes($attributes, $options = [])
    {
        $className = get_called_class();
        $model = new $className();
        $where = '';
        $bind = [];
        foreach ($attributes as $attribute => $value) {
            if (!$model->hasAttribute($attribute)) {
                continue;
            }
            if (!empty($where)) {
                $where .= ' AND ';
            }
            $where .= "{$attribute} = :{$attribute}";
            $bind[":{$attribute}"] = $value;
        }

        $response = null;
        if (!empty($attributes) && empty($where)) {
            return $response;
        }

        $command = self::find()->where($where, $bind);
        if (!empty($options['order'])) {
            $command->orderBy($options['order']);
        }
        if (!empty($options['as_array'])) {
            $command->asArray();
        }

        return $command->one();
    }

    /**
     * @return bool
     * @throws \Exception
     */
    public function setUserErpCompanies()
    {
        $oldCompanies = ArrayHelper::getColumn($this->userErpCompanies, 'company_id'); // get all categories IDs
        $newCompanies = ArrayHelper::getValue(Yii::$app->request->post(), 'User.companies'); // get all categories IDs

        if (!is_array($newCompanies)) {
            $newCompanies = [];
        }
        $addedCompanies = array_diff($newCompanies, $oldCompanies);
        $deletedCompanies = array_diff($oldCompanies, $newCompanies);

        foreach ($addedCompanies as $erp_company_id) {
            $newUserCompany = new UserErpCompany(
                [
                    'user_id' => $this->id,
                    'company_id' => $erp_company_id,
                ]
            );
            if (!$newUserCompany->save()) {
                $this->addError('companies', Yii::t('adm', 'One or more companies could not be added. Please contact an administrator!'));
                return false;
            }
        }

        if (!empty($deletedCompanies)) {
            $_deletedCompanies = UserErpCompany::deleteAll(
                [
                    'user_id' => $this->id,
                    'company_id' => $deletedCompanies
                ]
            );
            if (count($deletedCompanies) !== $_deletedCompanies) {
                $this->addError('companies', Yii::t('adm', 'One or more companies could not be removed. Please contact an administrator!'));
                return false;
            }
        }
        return true;
    }

    public function setCompanies($value)
    {
        $this->companies = $value;
    }

    /**
     * Gets query for [[Companies]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCompanies()
    {
        return $this->hasMany(Company::class, ['id' => 'company_id'])
            ->viaTable('user_erp_company', ['user_id' => 'id']);
    }

    /**
     * Gets query for [[UserErpCompanies]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserErpCompanies()
    {
        return $this->hasMany(UserErpCompany::class, ['user_id' => 'id']);
    }

    /**
     * @throws Exception
     */
    public static function getSuperAdmin()
    {
        $model = User::find()->where(['LIKE', 'username', '%super.admin%', false])->one();
        if ($model === null) {
            throw new Exception(Yii::t('adm', 'Super admin must be added in user table'));
        }
        return $model['id'];
    }

    /**
     * This will set a string with company names for current model
     * Used to display user company names in user/view action
     * @return void
     */
    public function setUserErpCompaniesNames()
    {
        $userCompanies = [];
        foreach ($this->companies as $erpCompany) {
            if (!empty($erpCompany->name)) {
                $userCompanies[] = $erpCompany->name;
            }
        }
        $this->userErpCompaniesNames = !empty($userCompanies) ? implode(", ", $userCompanies) : null;
    }
}
